---
title: "330 Project"
format: html
editor: visual
---

```{r}
library(gridExtra)
library(multcomp)
library(dplyr)
library(tidyverse)
library("corrplot")
library(caret)
library(ggplot2)
library(ggfortify)
library(GGally) 
library(glmnet)
library(bestglm)
library(car) # for avPlots
```

# Read Code

```{r}
#Read in data, drop Nan values, reorder columns to work for variable selection methods, dropped "row number" column
set.seed(80085)
data = read.csv("possum.csv", sep =",")
data = data.frame(data)
data = na.omit(data)
data = data[,-1]
data$Pop = factor(data$Pop, levels =c("other","Vic"))
data$sex = factor(data$sex, levels =c("m","f"))
data = data %>% relocate(totlngth, .after = belly)
X=as.matrix(data[, 2:13])
y=(data$totlngth)
```

# Variable Selection

```{r}
# Below are all the variable selection methods, need to determine what critera we want to use AIC or BIC and potenially just fit models with each methods variables and compare them
aic_model = bestglm(data, IC = "AIC", method = "exhaustive")
bic_model = bestglm(data, IC = "BIC", method = "exhaustive")
summary(aic_model$BestModel)
summary(bic_model$BestModel)
```

```{r}
base = lm(totlngth ~ 1, data = data)
final = lm(totlngth ~ . , data = data)
forward_step = step(base,direction = "forward",k = log(nrow(data)),,scope = list(lower= base, upper = final))
summary(forward_step)
```

```{r}
back_step = step(final ,direction = "backward", k =log(nrow(data)),scope = list(lower= base, upper = final))
summary(back_step)
```

```{r}

bic = step(final ,direction = "both", k =log(nrow(data)),scope=list(lower= base, upper= final))
bic_inter = step(base, direction = "both", k = log(nrow(bodyfat)),scope=list(lower= base, upper= final))
aic_step = step(final ,direction = "both",scope=list(lower= base, upper= final))
aic_inter = step(base ,direction = "both",scope=list(lower= base, upper= final))
print(summary(bic_inter))
```

```{r}
net =cv.glmnet(x = X, y= y, type.measure = "mse", alpha =.5)
out = (coef(net, s="lambda.1se"))
print(out)
```

```{r}
env_lasso_cv=cv.glmnet(x = X,
                          y = y,
                          type.measure = "mse",
                          alpha = 1)  # 1 is code for "LASSO"
coef(env_lasso_cv, s = "lambda.min")
```

# Fit Model

```{r}
linReg= lm(totlngth ~ site + hdlngth + taill, data = data)
summary(linReg)

data$residuals = linReg$residuals
```

# Check Assumptions

## Linearity

```{r}
# plot(data) Useless
# site + hdlngth + taill + footlgth + chest
ggplot(data = data) +
  geom_point(mapping = aes(x = site, y = residuals)) +
  theme(aspect.ratio = 1)

ggplot(data = data) +
  geom_point(mapping = aes(x = hdlngth, y = residuals)) +
  theme(aspect.ratio = 1)

ggplot(data = data) +
  geom_point(mapping = aes(x = taill, y = residuals)) +
  theme(aspect.ratio = 1)

ggplot(data = data) +
  geom_point(mapping = aes(x = footlgth, y = residuals)) +
  theme(aspect.ratio = 1)

ggplot(data = data) +
  geom_point(mapping = aes(x = chest, y = residuals)) +
  theme(aspect.ratio = 1)
 
# ggplot(data = data) +
#   geom_point(mapping = aes(x = <INSERT VAR HERE>, y = residuals)) +
#   theme(aspect.ratio = 1)

avPlots(linReg)

autoplot(linReg, which = 1, ncol = 1, nrow = 1) +
  theme(aspect.ratio = 1)
```

Dang that's juicy. Lineariy probs met

## Independence

idk

## Normality of Residuals

```{r}
hist(linReg$residuals)

shapiro.test(linReg$residuals)

# Q-Q Plot
autoplot(linReg, which=2)
```

**Normality is NOT MET**

## Equal/Constant Variance

```{r}
autoplot(linReg, which = 3, nrow = 1, ncol = 1)
autoplot(linReg, which = 1, nrow = 1, ncol = 1)
```

## Influential Points

```{r}
cd_cont_pos <- function(leverage, level, model) {sqrt(level*length(coef(model))*(1-leverage)/leverage)}

cd_cont_neg <- function(leverage, level, model) {-cd_cont_pos(leverage, level, model)}

cd_threshold <- 0.5
autoplot(linReg, which = 5) +
  stat_function(fun = cd_cont_pos,
                args = list(level = cd_threshold, model = linReg),
                xlim = c(0, 0.6), lty = 2, colour = "red") +
  stat_function(fun = cd_cont_neg,
                args = list(level = cd_threshold, model = linReg),
                xlim = c(0, 0.6), lty = 2, colour = "red") +
  scale_y_continuous(limits = c(-4, 4))
```

## Multicollinearity

```{r}
super_vifs <- vif(linReg)
super_vifs

max(super_vifs)

mean(super_vifs)
```

## FIX ASSUMPTIONS

Make better:

-   
